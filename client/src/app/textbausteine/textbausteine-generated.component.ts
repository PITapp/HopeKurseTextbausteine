/*
  This file is automatically generated. Any changes will be overwritten.
  Modify textbausteine.component.ts instead.
*/
import { LOCALE_ID, ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';
import { Subscription } from 'rxjs';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { HeadingComponent } from '@radzen/angular/dist/heading';
import { TabsComponent } from '@radzen/angular/dist/tabs';
import { PanelComponent } from '@radzen/angular/dist/panel';
import { ListBoxComponent } from '@radzen/angular/dist/listbox';
import { LabelComponent } from '@radzen/angular/dist/label';
import { DropDownComponent } from '@radzen/angular/dist/dropdown';
import { TextBoxComponent } from '@radzen/angular/dist/textbox';
import { NumericComponent } from '@radzen/angular/dist/numeric';
import { ButtonComponent } from '@radzen/angular/dist/button';
import { GridComponent } from '@radzen/angular/dist/grid';
import { HtmlComponent } from '@radzen/angular/dist/html';

import { ConfigService } from '../config.service';

import { DbHopeKurseTextbausteineService } from '../db-hope-kurse-textbausteine.service';
import { SecurityService } from '../security.service';

export class TextbausteineGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('heading0') heading0: HeadingComponent;
  @ViewChild('heading1') heading1: HeadingComponent;
  @ViewChild('heading2') heading2: HeadingComponent;
  @ViewChild('tabs0') tabs0: TabsComponent;
  @ViewChild('panel0') panel0: PanelComponent;
  @ViewChild('filterTextbausteinArtCode') filterTextbausteinArtCode: ListBoxComponent;
  @ViewChild('label4') label4: LabelComponent;
  @ViewChild('filterKursNr') filterKursNr: DropDownComponent;
  @ViewChild('label0') label0: LabelComponent;
  @ViewChild('textbox2') textbox2: TextBoxComponent;
  @ViewChild('label6') label6: LabelComponent;
  @ViewChild('dropdown4') dropdown4: DropDownComponent;
  @ViewChild('label1') label1: LabelComponent;
  @ViewChild('numeric0') numeric0: NumericComponent;
  @ViewChild('label5') label5: LabelComponent;
  @ViewChild('dropdown0') dropdown0: DropDownComponent;
  @ViewChild('label3') label3: LabelComponent;
  @ViewChild('dropdown1') dropdown1: DropDownComponent;
  @ViewChild('label2') label2: LabelComponent;
  @ViewChild('textbox0') textbox0: TextBoxComponent;
  @ViewChild('button7') button7: ButtonComponent;
  @ViewChild('panel4') panel4: PanelComponent;
  @ViewChild('gridTextbausteine') gridTextbausteine: GridComponent;
  @ViewChild('button0') button0: ButtonComponent;
  @ViewChild('button1') button1: ButtonComponent;
  @ViewChild('button2') button2: ButtonComponent;
  @ViewChild('button3') button3: ButtonComponent;
  @ViewChild('panel6') panel6: PanelComponent;
  @ViewChild('htmlEditorInfotexte') htmlEditorInfotexte: HtmlComponent;
  @ViewChild('button4') button4: ButtonComponent;
  @ViewChild('buttonNeu') buttonNeu: ButtonComponent;
  @ViewChild('buttonLoeschen') buttonLoeschen: ButtonComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  configService: ConfigService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  httpClient: HttpClient;

  locale: string;

  _location: Location;

  _subscription: Subscription;

  dbHopeKurseTextbausteine: DbHopeKurseTextbausteineService;

  security: SecurityService;
  dsoBenutzer: any;
  rstTextbausteineArten: any;
  rstKurse: any;
  rstAutoren: any;
  valAnreden: any;
  valDokumente: any;
  parameters: any;
  rstTextbausteine: any;
  rstTextbausteineCount: any;
  strTextbausteinHTML: any;
  dsoTextbausteine: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.configService = this.injector.get(ConfigService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.locale = this.injector.get(LOCALE_ID);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.httpClient = this.injector.get(HttpClient);

    this.dbHopeKurseTextbausteine = this.injector.get(DbHopeKurseTextbausteineService);
    this.security = this.injector.get(SecurityService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    if (this._subscription) {
      this._subscription.unsubscribe();
    }
  }


  load() {
    this.dbHopeKurseTextbausteine.getBenutzers(`BenutzerName eq '${this.security.user.name}'`, null, null, null, null, null, null, null)
    .subscribe((result: any) => {
      this.dsoBenutzer = result.value[0];

      this.dbHopeKurseTextbausteine.getIbsiTextbausteineArtens(null, null, null, `Sortierung`, null, null, null, null)
      .subscribe((result: any) => {
        this.rstTextbausteineArten = result.value;

        this.dbHopeKurseTextbausteine.getIbsiKurses(null, null, null, `Titel`, null, null, null, null)
        .subscribe((result: any) => {
          this.rstKurse = result.value;

          this.dbHopeKurseTextbausteine.getIbsiTextbausteineAutorens(null, null, null, `Name`, null, null, null, null)
          .subscribe((result: any) => {
            this.rstAutoren = result.value;

            this.valAnreden = [{text: 'Du', value: 'Du'}, {text: 'Sie', value: 'Sie'}, {text: 'Ohne', value: 'Ohne'}];

            this.valDokumente = [{text: 'Mit', value: 'Mit Dokument'}, {text: 'Ohne', value: 'Ohne Dokument'}];

            this.gridTextbausteine.load();
          }, (result: any) => {

          });
        }, (result: any) => {

        });
      }, (result: any) => {

      });
    }, (result: any) => {

    });
  }

  filterTextbausteinArtCodeChange(event: any) {
    this.dbHopeKurseTextbausteine.updateBenutzer(null, this.dsoBenutzer.BenutzerID, this.dsoBenutzer)
    .subscribe((result: any) => {

    }, (result: any) => {

    });

    this.gridTextbausteine.load();
  }

  filterKursNrChange(event: any) {
    this.dbHopeKurseTextbausteine.updateBenutzer(null, this.dsoBenutzer.BenutzerID, this.dsoBenutzer)
    .subscribe((result: any) => {

    }, (result: any) => {

    });

    this.gridTextbausteine.load();
  }

  textbox2Change(event: any) {
    this.dbHopeKurseTextbausteine.updateBenutzer(null, this.dsoBenutzer.BenutzerID, this.dsoBenutzer)
    .subscribe((result: any) => {

    }, (result: any) => {

    });

    this.gridTextbausteine.load();
  }

  dropdown4Change(event: any) {
    this.dbHopeKurseTextbausteine.updateBenutzer(null, this.dsoBenutzer.BenutzerID, this.dsoBenutzer)
    .subscribe((result: any) => {

    }, (result: any) => {

    });

    this.gridTextbausteine.load();
  }

  numeric0Change(event: any) {
    this.dbHopeKurseTextbausteine.updateBenutzer(null, this.dsoBenutzer.BenutzerID, this.dsoBenutzer)
    .subscribe((result: any) => {

    }, (result: any) => {

    });

    this.gridTextbausteine.load();
  }

  dropdown0Change(event: any) {
    this.dbHopeKurseTextbausteine.updateBenutzer(null, this.dsoBenutzer.BenutzerID, this.dsoBenutzer)
    .subscribe((result: any) => {

    }, (result: any) => {

    });

    this.gridTextbausteine.load();
  }

  dropdown1Change(event: any) {
    this.dbHopeKurseTextbausteine.updateBenutzer(null, this.dsoBenutzer.BenutzerID, this.dsoBenutzer)
    .subscribe((result: any) => {

    }, (result: any) => {

    });

    this.gridTextbausteine.load();
  }

  textbox0Change(event: any) {
    this.dbHopeKurseTextbausteine.updateBenutzer(null, this.dsoBenutzer.BenutzerID, this.dsoBenutzer)
    .subscribe((result: any) => {

    }, (result: any) => {

    });

    this.gridTextbausteine.load();
  }

  gridTextbausteineLoadData(event: any) {
    this.dbHopeKurseTextbausteine.getIbsiTextbausteines(`TextbausteinArtCode eq '${this.dsoBenutzer.FilterTextbausteinArtCode}' 
${this.dsoBenutzer.FilterKursNr ? 'and KursNr eq ' + this.dsoBenutzer.FilterKursNr : ''}
${this.dsoBenutzer.FilterAutorNr ? 'and AutorNr eq ' + this.dsoBenutzer.FilterAutorNr : ''}`, event.top, event.skip, `${event.orderby || 'TitelTextbaustein'}`, event.top != null && event.skip != null, `IBSITextbausteineAutoren, IBSIKurse`, null, null)
    .subscribe((result: any) => {
      this.rstTextbausteine = result.value;

      this.rstTextbausteineCount = event.top != null && event.skip != null ? result['@odata.count'] : result.value.length;

      this.gridTextbausteine.onSelect(this.rstTextbausteine[0]);
    }, (result: any) => {

    });
  }

  gridTextbausteineRowSelect(event: any) {
    this.strTextbausteinHTML = event.TextbausteinHTML;

    this.dsoTextbausteine = event;
  }
}
