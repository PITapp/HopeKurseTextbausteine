/*
  This file is automatically generated. Any changes will be overwritten.
  Modify textbausteine-dokumente.component.ts instead.
*/
import { LOCALE_ID, ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';
import { Subscription } from 'rxjs';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { TemplateFormComponent } from '@radzen/angular/dist/template-form';
import { LabelComponent } from '@radzen/angular/dist/label';
import { TextBoxComponent } from '@radzen/angular/dist/textbox';
import { RequiredValidatorComponent } from '@radzen/angular/dist/required-validator';
import { UploadComponent } from '@radzen/angular/dist/upload';
import { ButtonComponent } from '@radzen/angular/dist/button';
import { TextAreaComponent } from '@radzen/angular/dist/textarea';

import { ConfigService } from '../config.service';
import { MeldungLoeschenComponent } from '../meldung-loeschen/meldung-loeschen.component';

import { DbHopeKurseTextbausteineService } from '../db-hope-kurse-textbausteine.service';
import { SecurityService } from '../security.service';

export class TextbausteineDokumenteGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('form0') form0: TemplateFormComponent;
  @ViewChild('titelTextbausteinLabel') titelTextbausteinLabel: LabelComponent;
  @ViewChild('titelTextbaustein') titelTextbaustein: TextBoxComponent;
  @ViewChild('requiredValidator1') requiredValidator1: RequiredValidatorComponent;
  @ViewChild('untertitelTextbausteinLabel') untertitelTextbausteinLabel: LabelComponent;
  @ViewChild('untertitelTextbaustein') untertitelTextbaustein: TextBoxComponent;
  @ViewChild('dokumentTitelLabel') dokumentTitelLabel: LabelComponent;
  @ViewChild('dokumentTitel') dokumentTitel: TextBoxComponent;
  @ViewChild('uploadDokumente') uploadDokumente: UploadComponent;
  @ViewChild('buttonDokumentLoeschen') buttonDokumentLoeschen: ButtonComponent;
  @ViewChild('buttonDokumentOeffnen2') buttonDokumentOeffnen2: ButtonComponent;
  @ViewChild('label19') label19: LabelComponent;
  @ViewChild('infoText') infoText: TextAreaComponent;
  @ViewChild('button5') button5: ButtonComponent;
  @ViewChild('button6') button6: ButtonComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  configService: ConfigService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  httpClient: HttpClient;

  locale: string;

  _location: Location;

  _subscription: Subscription;

  dbHopeKurseTextbausteine: DbHopeKurseTextbausteineService;

  security: SecurityService;
  dsoTextbausteine: any;
  parameters: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.configService = this.injector.get(ConfigService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.locale = this.injector.get(LOCALE_ID);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.httpClient = this.injector.get(HttpClient);

    this.dbHopeKurseTextbausteine = this.injector.get(DbHopeKurseTextbausteineService);
    this.security = this.injector.get(SecurityService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    if (this._subscription) {
      this._subscription.unsubscribe();
    }
  }


  load() {
    this.dbHopeKurseTextbausteine.getIbsiTextbausteineByTextbausteinNr(null, this.parameters.TextbausteinNr)
    .subscribe((result: any) => {
      this.dsoTextbausteine = result;
    }, (result: any) => {

    });
  }

  form0Submit(event: any) {
    this.dbHopeKurseTextbausteine.updateIbsiTextbausteine(null, this.dsoTextbausteine.TextbausteinNr, this.dsoTextbausteine)
    .subscribe((result: any) => {
      this.notificationService.notify({ severity: "success", summary: ``, detail: `Textbaustein gespeichert` });

      this.dialogRef.close(result);
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: ``, detail: `Textbaustein konnte nicht gespeichert werden!` });
    });
  }

  uploadDokumenteBeforeUpload(event: any) {
    var strDateiName = this.uploadDokumente.fileUpload.files[0].name;
var strDateiEndung = strDateiName.substring(strDateiName.indexOf("."));

this.dsoTextbausteine.DokumentTitel = strDateiName;
this.dsoTextbausteine.DokumentName = 'tbdok' + this.parameters.TextbausteinNr + strDateiEndung;
this.dsoTextbausteine.DokumentTyp = strDateiName.substring(strDateiName.indexOf(".") + 1);
this.dsoTextbausteine.DokumentErstelltVon = this.security.user.name;

var date = new Date();

this.dsoTextbausteine.DokumentErstelltAm = new Date(Date.UTC(date.getFullYear(),
                                                    date.getMonth(),
                                                    date.getDate(),
                                                    date.getHours(),
                                                    date.getMinutes(),
                                                    date.getSeconds(),
                                                    date.getMilliseconds() ))
  }

  uploadDokumenteError(event: any) {
    this.notificationService.notify({ severity: "error", summary: ``, detail: `Hochladen fehlgeschlagen!` });
  }

  uploadDokumenteUpload(event: any) {
    this.notificationService.notify({ severity: "success", summary: ``, detail: `Dokument erfolgreich hochgeladen` });
  }

  buttonDokumentLoeschenClick(event: any) {
    this.dialogService.open(MeldungLoeschenComponent, { parameters: {strMeldung: "Soll das Dokument '" + this.dsoTextbausteine.DokumentTitel + "' gelöscht werden?"}, title: `Löschen Dokument ` })
        .afterClosed().subscribe(result => {
              if (result == 'Löschen') {
        this.dsoTextbausteine.DokumentTitel = null;
this.dsoTextbausteine.DokumentName = null;
this.dsoTextbausteine.DokumentTyp = null;

this.dsoTextbausteine.DokumentErstelltVon = this.security.user.name;

var date = new Date();

this.dsoTextbausteine.DokumentErstelltAm = new Date(Date.UTC(date.getFullYear(),
                                                    date.getMonth(),
                                                    date.getDate(),
                                                    date.getHours(),
                                                    date.getMinutes(),
                                                    date.getSeconds(),
                                                    date.getMilliseconds() ))
      }
    });
  }

  buttonDokumentOeffnen2Click(event: any) {
    window.open('https://hopekurse-textbausteine.app/upload/dokumente/' + this.dsoTextbausteine.DokumentName, '_blank').focus();
  }

  button6Click(event: any) {
    if (this.dialogRef) {
      this.dialogRef.close();
    } else {
      this._location.back();
    }
  }
}
