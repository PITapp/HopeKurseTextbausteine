/*
  This file is automatically generated. Any changes will be overwritten.
  Modify kontakte.component.ts instead.
*/
import { LOCALE_ID, ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';
import { Subscription } from 'rxjs';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { HeadingComponent } from '@radzen/angular/dist/heading';
import { GridComponent } from '@radzen/angular/dist/grid';
import { CardComponent } from '@radzen/angular/dist/card';
import { TemplateFormComponent } from '@radzen/angular/dist/template-form';
import { LabelComponent } from '@radzen/angular/dist/label';
import { DropDownComponent } from '@radzen/angular/dist/dropdown';
import { TextBoxComponent } from '@radzen/angular/dist/textbox';
import { RequiredValidatorComponent } from '@radzen/angular/dist/required-validator';
import { DatePickerComponent } from '@radzen/angular/dist/datepicker';
import { ButtonComponent } from '@radzen/angular/dist/button';

import { ConfigService } from '../config.service';

import { DbHopeKurseTextbausteineService } from '../db-hope-kurse-textbausteine.service';
import { SecurityService } from '../security.service';

export class KontakteGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('pageTitle') pageTitle: HeadingComponent;
  @ViewChild('grid0') grid0: GridComponent;
  @ViewChild('card1') card1: CardComponent;
  @ViewChild('form0') form0: TemplateFormComponent;
  @ViewChild('AnredeIDLabel') anredeIdLabel: LabelComponent;
  @ViewChild('AnredeID') anredeId: DropDownComponent;
  @ViewChild('Name1Label') name1Label: LabelComponent;
  @ViewChild('Name1') name1: TextBoxComponent;
  @ViewChild('Name1RequiredValidator') name1RequiredValidator: RequiredValidatorComponent;
  @ViewChild('Name2Label') name2Label: LabelComponent;
  @ViewChild('Name2') name2: TextBoxComponent;
  @ViewChild('NameGesamtLabel') nameGesamtLabel: LabelComponent;
  @ViewChild('NameGesamt') nameGesamt: TextBoxComponent;
  @ViewChild('NameVorNachLabel') nameVorNachLabel: LabelComponent;
  @ViewChild('NameVorNach') nameVorNach: TextBoxComponent;
  @ViewChild('NameKuerzelLabel') nameKuerzelLabel: LabelComponent;
  @ViewChild('NameKuerzel') nameKuerzel: TextBoxComponent;
  @ViewChild('TitelVorneLabel') titelVorneLabel: LabelComponent;
  @ViewChild('TitelVorne') titelVorne: TextBoxComponent;
  @ViewChild('TitelHintenLabel') titelHintenLabel: LabelComponent;
  @ViewChild('TitelHinten') titelHinten: TextBoxComponent;
  @ViewChild('StrasseLabel') strasseLabel: LabelComponent;
  @ViewChild('Strasse') strasse: TextBoxComponent;
  @ViewChild('PLZLabel') plzLabel: LabelComponent;
  @ViewChild('PLZ') plz: TextBoxComponent;
  @ViewChild('OrtLabel') ortLabel: LabelComponent;
  @ViewChild('Ort') ort: TextBoxComponent;
  @ViewChild('GeburtsdatumLabel') geburtsdatumLabel: LabelComponent;
  @ViewChild('Geburtsdatum') geburtsdatum: DatePickerComponent;
  @ViewChild('VersicherungsnummerLabel') versicherungsnummerLabel: LabelComponent;
  @ViewChild('Versicherungsnummer') versicherungsnummer: TextBoxComponent;
  @ViewChild('StaatsangehoerigkeitLabel') staatsangehoerigkeitLabel: LabelComponent;
  @ViewChild('Staatsangehoerigkeit') staatsangehoerigkeit: TextBoxComponent;
  @ViewChild('Telefon1Label') telefon1Label: LabelComponent;
  @ViewChild('Telefon1') telefon1: TextBoxComponent;
  @ViewChild('Telefon2Label') telefon2Label: LabelComponent;
  @ViewChild('Telefon2') telefon2: TextBoxComponent;
  @ViewChild('EMail1Label') eMail1Label: LabelComponent;
  @ViewChild('EMail1') eMail1: TextBoxComponent;
  @ViewChild('EMail2Label') eMail2Label: LabelComponent;
  @ViewChild('EMail2') eMail2: TextBoxComponent;
  @ViewChild('WebseiteLabel') webseiteLabel: LabelComponent;
  @ViewChild('Webseite') webseite: TextBoxComponent;
  @ViewChild('BildURLLabel') bildUrlLabel: LabelComponent;
  @ViewChild('BildURL') bildUrl: TextBoxComponent;
  @ViewChild('InfoLabel') infoLabel: LabelComponent;
  @ViewChild('Info') info: TextBoxComponent;
  @ViewChild('button1') button1: ButtonComponent;
  @ViewChild('button2') button2: ButtonComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  configService: ConfigService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  httpClient: HttpClient;

  locale: string;

  _location: Location;

  _subscription: Subscription;

  dbHopeKurseTextbausteine: DbHopeKurseTextbausteineService;

  security: SecurityService;
  getBaseAnredensResult: any;
  parameters: any;
  getBasesResult: any;
  getBasesCount: any;
  isEdit: any;
  base: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.configService = this.injector.get(ConfigService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.locale = this.injector.get(LOCALE_ID);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.httpClient = this.injector.get(HttpClient);

    this.dbHopeKurseTextbausteine = this.injector.get(DbHopeKurseTextbausteineService);
    this.security = this.injector.get(SecurityService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    if (this._subscription) {
      this._subscription.unsubscribe();
    }
  }


  load() {
    this.dbHopeKurseTextbausteine.getBaseAnredens(null, null, null, null, null, null, null, null)
    .subscribe((result: any) => {
      this.getBaseAnredensResult = result.value;
    }, (result: any) => {

    });

    this.grid0.load();
  }

  grid0LoadData(event: any) {
    this.dbHopeKurseTextbausteine.getBases(`${event.filter}`, event.top, event.skip, `${event.orderby}`, event.top != null && event.skip != null, null, null, null)
    .subscribe((result: any) => {
      this.getBasesResult = result.value;

      this.getBasesCount = event.top != null && event.skip != null ? result['@odata.count'] : result.value.length;

      if (result.value.length && !this.grid0.value) {
        this.grid0.onSelect(result.value[0])
      }
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: `Error`, detail: `Unable to load Bases` });
    });
  }

  grid0Delete(event: any) {
    this.dbHopeKurseTextbausteine.deleteBase(event.BaseID)
    .subscribe((result: any) => {
      this.notificationService.notify({ severity: "success", summary: `Success`, detail: `Base deleted!` });
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: `Error`, detail: `Unable to delete Base` });
    });
  }

  grid0Add(event: any) {
    this.isEdit = false;

    this.base = {};
  }

  grid0RowSelect(event: any) {
    this.isEdit = true;

    this.base = event;
  }

  form0Submit(event: any) {
    if (this.isEdit) {
          this.dbHopeKurseTextbausteine.updateBase(null, this.base.BaseID, event)
      .subscribe((result: any) => {
          this.notificationService.notify({ severity: "success", summary: `Success`, detail: `Base updated!` });

      this.grid0.load()
      }, (result: any) => {
          this.notificationService.notify({ severity: "error", summary: `Error`, detail: `Unable to update Base` });
      });
    }

    if (!this.isEdit) {
          this.dbHopeKurseTextbausteine.createBase(null, event)
      .subscribe((result: any) => {
          this.base = {};

      this.notificationService.notify({ severity: "success", summary: `Success`, detail: `Base created!` });
      }, (result: any) => {
          this.notificationService.notify({ severity: "error", summary: `Error`, detail: `Unable to create new Base!` });
      });
    }
  }
}
