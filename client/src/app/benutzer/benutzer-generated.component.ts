/*
  This file is automatically generated. Any changes will be overwritten.
  Modify benutzer.component.ts instead.
*/
import { LOCALE_ID, ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';
import { Subscription } from 'rxjs';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { HeadingComponent } from '@radzen/angular/dist/heading';
import { TabsComponent } from '@radzen/angular/dist/tabs';
import { GridComponent } from '@radzen/angular/dist/grid';
import { TemplateFormComponent } from '@radzen/angular/dist/template-form';
import { LabelComponent } from '@radzen/angular/dist/label';
import { TextBoxComponent } from '@radzen/angular/dist/textbox';
import { RequiredValidatorComponent } from '@radzen/angular/dist/required-validator';
import { DropDownComponent } from '@radzen/angular/dist/dropdown';
import { TextAreaComponent } from '@radzen/angular/dist/textarea';
import { ButtonComponent } from '@radzen/angular/dist/button';
import { PanelComponent } from '@radzen/angular/dist/panel';

import { ConfigService } from '../config.service';
import { BenutzerNeuRolleComponent } from '../benutzer-neu-rolle/benutzer-neu-rolle.component';
import { BenutzerNeuComponent } from '../benutzer-neu/benutzer-neu.component';
import { BenutzerBearbeitenComponent } from '../benutzer-bearbeiten/benutzer-bearbeiten.component';

import { DbHopeKurseTextbausteineService } from '../db-hope-kurse-textbausteine.service';
import { SecurityService } from '../security.service';

export class BenutzerGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('heading0') heading0: HeadingComponent;
  @ViewChild('heading1') heading1: HeadingComponent;
  @ViewChild('heading2') heading2: HeadingComponent;
  @ViewChild('tabs0') tabs0: TabsComponent;
  @ViewChild('gridUsers') gridUsers: GridComponent;
  @ViewChild('formBenutzer') formBenutzer: TemplateFormComponent;
  @ViewChild('benutzernameLabel') benutzernameLabel: LabelComponent;
  @ViewChild('benutzername') benutzername: TextBoxComponent;
  @ViewChild('benutzernameRequiredValidator') benutzernameRequiredValidator: RequiredValidatorComponent;
  @ViewChild('initialenLabel') initialenLabel: LabelComponent;
  @ViewChild('initialen') initialen: TextBoxComponent;
  @ViewChild('initialenRequiredValidator') initialenRequiredValidator: RequiredValidatorComponent;
  @ViewChild('eMailLabel') eMailLabel: LabelComponent;
  @ViewChild('txbBenutzerEMail') txbBenutzerEMail: TextBoxComponent;
  @ViewChild('roleNamesLabel') roleNamesLabel: LabelComponent;
  @ViewChild('dpdRollen') dpdRollen: DropDownComponent;
  @ViewChild('benutzerInfoLabel') benutzerInfoLabel: LabelComponent;
  @ViewChild('txaNotiz') txaNotiz: TextAreaComponent;
  @ViewChild('button1') button1: ButtonComponent;
  @ViewChild('gridRoles') gridRoles: GridComponent;
  @ViewChild('panel0') panel0: PanelComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  configService: ConfigService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  httpClient: HttpClient;

  locale: string;

  _location: Location;

  _subscription: Subscription;

  dbHopeKurseTextbausteine: DbHopeKurseTextbausteineService;

  security: SecurityService;
  rstUsers: any;
  rstRoles: any;
  parameters: any;
  rstBenutzer: any;
  rstUser: any;
  rstBenutzerRollen: any;
  varBenutzerrolleTitel: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.configService = this.injector.get(ConfigService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.locale = this.injector.get(LOCALE_ID);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.httpClient = this.injector.get(HttpClient);

    this.dbHopeKurseTextbausteine = this.injector.get(DbHopeKurseTextbausteineService);
    this.security = this.injector.get(SecurityService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    if (this._subscription) {
      this._subscription.unsubscribe();
    }
  }


  load() {
    this.security.getUsers(null, null, null, `UserName`, null, null)
    .subscribe((result: any) => {
      this.rstUsers = result.value;

      if (result.value.length && !this.gridUsers.value) {
        this.gridUsers.onSelect(result.value[0])
      }
    }, (result: any) => {

    });

    this.security.getRoles(null, null, null, `Name`, null, null)
    .subscribe((result: any) => {
      this.rstRoles = result.value;

      if (result.value.length && !this.gridRoles.value) {
        this.gridRoles.onSelect(result.value[0])
      }
    }, (result: any) => {

    });
  }

  gridUsersAdd(event: any) {
    this.dialogService.open(BenutzerNeuComponent, { parameters: {}, title: `Neuer Benutzer` });
  }

  gridUsersDelete(event: any) {
    this.security.deleteUser(`${event.Id}`)
    .subscribe((result: any) => {
      this.notificationService.notify({ severity: "success", summary: `Löschen erfolgreich`, detail: `Der Benutzer '${event.UserName}' wurde gelöscht.` });
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: `Benutzer konnte nicht gelöscht werden!`, detail: `${result.error.message}` });
    });
  }

  gridUsersRowDoubleClick(event: any) {
    this.dialogService.open(BenutzerBearbeitenComponent, { parameters: {Id: event.Id}, title: `Bearbeiten Benutzer` });
  }

  gridUsersRowSelect(event: any) {
    this.dbHopeKurseTextbausteine.getBenutzers(`AspNetUsers_Id eq '${event.Id}'`, null, null, null, null, null, null, null)
    .subscribe((result: any) => {
      this.rstBenutzer = result.value[0];
    }, (result: any) => {

    });

    this.security.getUserById(`${event.Id}`)
    .subscribe((result: any) => {
      this.rstUser = result;
    }, (result: any) => {

    });
  }

  formBenutzerSubmit(event: any) {
    this.dbHopeKurseTextbausteine.updateBenutzer(null, this.rstBenutzer.BenutzerID, this.rstBenutzer)
    .subscribe((result: any) => {
      this.notificationService.notify({ severity: "success", summary: `Benutzerdaten gespeichert`, detail: `` });
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: `Benutzerdaten nicht gespeichert`, detail: `` });
    });
  }

  gridRolesAdd(event: any) {
    this.dialogService.open(BenutzerNeuRolleComponent, { parameters: {}, title: `Neue Rolle` });
  }

  gridRolesDelete(event: any) {
    this.security.deleteRole(`${event.Id}`)
    .subscribe((result: any) => {
      this.notificationService.notify({ severity: "info", summary: `Success`, detail: `Rolle '${event.Name}' erfolgreich gelöscht.` });
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: `Rolle '${event.Name}' kann nicht gelöscht werden!`, detail: `${result.error.message}` });
    });
  }

  gridRolesRowSelect(event: any) {
    this.security.getRoles(`RoleId eq '${event.Id}'`, null, null, null, null, null)
    .subscribe((result: any) => {
      this.rstBenutzerRollen = result.value;
    }, (result: any) => {

    });

    this.varBenutzerrolleTitel = event.Name;
  }
}
