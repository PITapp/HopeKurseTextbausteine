/*
  This file is automatically generated. Any changes will be overwritten.
  Modify copy-of-kontakte.component.ts instead.
*/
import { LOCALE_ID, ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';
import { Subscription } from 'rxjs';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { HeadingComponent } from '@radzen/angular/dist/heading';
import { TabsComponent } from '@radzen/angular/dist/tabs';
import { GridComponent } from '@radzen/angular/dist/grid';
import { PanelComponent } from '@radzen/angular/dist/panel';
import { TemplateFormComponent } from '@radzen/angular/dist/template-form';
import { LabelComponent } from '@radzen/angular/dist/label';
import { DropDownComponent } from '@radzen/angular/dist/dropdown';
import { TextBoxComponent } from '@radzen/angular/dist/textbox';
import { RequiredValidatorComponent } from '@radzen/angular/dist/required-validator';
import { DatePickerComponent } from '@radzen/angular/dist/datepicker';
import { TextAreaComponent } from '@radzen/angular/dist/textarea';
import { ButtonComponent } from '@radzen/angular/dist/button';
import { ListBoxComponent } from '@radzen/angular/dist/listbox';
import { ImageComponent } from '@radzen/angular/dist/image';
import { UploadComponent } from '@radzen/angular/dist/upload';
import { FieldsetComponent } from '@radzen/angular/dist/fieldset';
import { CardComponent } from '@radzen/angular/dist/card';

import { ConfigService } from '../config.service';

import { DbHopeKurseTextbausteineService } from '../db-hope-kurse-textbausteine.service';
import { SecurityService } from '../security.service';

export class CopyOfKontakteGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('heading8') heading8: HeadingComponent;
  @ViewChild('heading9') heading9: HeadingComponent;
  @ViewChild('heading16') heading16: HeadingComponent;
  @ViewChild('tabs0') tabs0: TabsComponent;
  @ViewChild('gridKontakte') gridKontakte: GridComponent;
  @ViewChild('panel2') panel2: PanelComponent;
  @ViewChild('templateForm0') templateForm0: TemplateFormComponent;
  @ViewChild('label7') label7: LabelComponent;
  @ViewChild('dropdown0') dropdown0: DropDownComponent;
  @ViewChild('label8') label8: LabelComponent;
  @ViewChild('textbox0') textbox0: TextBoxComponent;
  @ViewChild('requiredValidator0') requiredValidator0: RequiredValidatorComponent;
  @ViewChild('label18') label18: LabelComponent;
  @ViewChild('textbox14') textbox14: TextBoxComponent;
  @ViewChild('requiredValidator2') requiredValidator2: RequiredValidatorComponent;
  @ViewChild('label9') label9: LabelComponent;
  @ViewChild('textbox2') textbox2: TextBoxComponent;
  @ViewChild('requiredValidator1') requiredValidator1: RequiredValidatorComponent;
  @ViewChild('label10') label10: LabelComponent;
  @ViewChild('textbox4') textbox4: TextBoxComponent;
  @ViewChild('textbox5') textbox5: TextBoxComponent;
  @ViewChild('label11') label11: LabelComponent;
  @ViewChild('textbox6') textbox6: TextBoxComponent;
  @ViewChild('label12') label12: LabelComponent;
  @ViewChild('textbox7') textbox7: TextBoxComponent;
  @ViewChild('textbox8') textbox8: TextBoxComponent;
  @ViewChild('label13') label13: LabelComponent;
  @ViewChild('textbox9') textbox9: TextBoxComponent;
  @ViewChild('label14') label14: LabelComponent;
  @ViewChild('textbox10') textbox10: TextBoxComponent;
  @ViewChild('label15') label15: LabelComponent;
  @ViewChild('textbox11') textbox11: TextBoxComponent;
  @ViewChild('label16') label16: LabelComponent;
  @ViewChild('textbox12') textbox12: TextBoxComponent;
  @ViewChild('label17') label17: LabelComponent;
  @ViewChild('datepicker0') datepicker0: DatePickerComponent;
  @ViewChild('label19') label19: LabelComponent;
  @ViewChild('textarea1') textarea1: TextAreaComponent;
  @ViewChild('button4') button4: ButtonComponent;
  @ViewChild('listboxKontakte') listboxKontakte: ListBoxComponent;
  @ViewChild('panel0') panel0: PanelComponent;
  @ViewChild('form0') form0: TemplateFormComponent;
  @ViewChild('anredeIdLabel') anredeIdLabel: LabelComponent;
  @ViewChild('anredeId') anredeId: DropDownComponent;
  @ViewChild('name1Label') name1Label: LabelComponent;
  @ViewChild('name1') name1: TextBoxComponent;
  @ViewChild('name1RequiredValidator') name1RequiredValidator: RequiredValidatorComponent;
  @ViewChild('name2') name2: TextBoxComponent;
  @ViewChild('label0') label0: LabelComponent;
  @ViewChild('nameKuerzel') nameKuerzel: TextBoxComponent;
  @ViewChild('label1') label1: LabelComponent;
  @ViewChild('titelVorne') titelVorne: TextBoxComponent;
  @ViewChild('titelHinten') titelHinten: TextBoxComponent;
  @ViewChild('strasseLabel') strasseLabel: LabelComponent;
  @ViewChild('strasse') strasse: TextBoxComponent;
  @ViewChild('label2') label2: LabelComponent;
  @ViewChild('plz') plz: TextBoxComponent;
  @ViewChild('ort') ort: TextBoxComponent;
  @ViewChild('label3') label3: LabelComponent;
  @ViewChild('telefon1') telefon1: TextBoxComponent;
  @ViewChild('label6') label6: LabelComponent;
  @ViewChild('textbox3') textbox3: TextBoxComponent;
  @ViewChild('label4') label4: LabelComponent;
  @ViewChild('eMail1') eMail1: TextBoxComponent;
  @ViewChild('label5') label5: LabelComponent;
  @ViewChild('eMail2') eMail2: TextBoxComponent;
  @ViewChild('geburtsdatumLabel') geburtsdatumLabel: LabelComponent;
  @ViewChild('geburtsdatum') geburtsdatum: DatePickerComponent;
  @ViewChild('button0') button0: ButtonComponent;
  @ViewChild('button3') button3: ButtonComponent;
  @ViewChild('hinzufugen') hinzufugen: ButtonComponent;
  @ViewChild('button1') button1: ButtonComponent;
  @ViewChild('button2') button2: ButtonComponent;
  @ViewChild('panel1') panel1: PanelComponent;
  @ViewChild('image0') image0: ImageComponent;
  @ViewChild('upload0') upload0: UploadComponent;
  @ViewChild('panel3') panel3: PanelComponent;
  @ViewChild('infoLabel') infoLabel: LabelComponent;
  @ViewChild('textarea0') textarea0: TextAreaComponent;
  @ViewChild('fieldset0') fieldset0: FieldsetComponent;
  @ViewChild('card0') card0: CardComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  configService: ConfigService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  httpClient: HttpClient;

  locale: string;

  _location: Location;

  _subscription: Subscription;

  dbHopeKurseTextbausteine: DbHopeKurseTextbausteineService;

  security: SecurityService;
  getBaseAnredensResult: any;
  rstBaseAlles: any;
  selectedBaseAlles: any;
  datBaseAlles: any;
  parameters: any;
  isEdit: any;
  base: any;
  getBasesResult: any;
  getBasesCount: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.configService = this.injector.get(ConfigService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.locale = this.injector.get(LOCALE_ID);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.httpClient = this.injector.get(HttpClient);

    this.dbHopeKurseTextbausteine = this.injector.get(DbHopeKurseTextbausteineService);
    this.security = this.injector.get(SecurityService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    if (this._subscription) {
      this._subscription.unsubscribe();
    }
  }


  load() {
    this.dbHopeKurseTextbausteine.getBaseAnredens(null, null, null, null, null, null, null, null)
    .subscribe((result: any) => {
      this.getBaseAnredensResult = result.value;
    }, (result: any) => {

    });

    this.gridKontakte.load();

    this.dbHopeKurseTextbausteine.getVwBaseAlles(null, null, null, null, null, null, null, null)
    .subscribe((result: any) => {
      this.rstBaseAlles = result.value;

      this.selectedBaseAlles = result.value[0].BaseID;

      this.datBaseAlles = result.value[0];
    }, (result: any) => {

    });
  }

  gridKontakteAdd(event: any) {
    this.isEdit = false;

    this.base = {};
  }

  gridKontakteDelete(event: any) {
    this.dbHopeKurseTextbausteine.deleteBase(event.BaseID)
    .subscribe((result: any) => {
      this.notificationService.notify({ severity: "success", summary: `Success`, detail: `Base deleted!` });
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: `Error`, detail: `Unable to delete Base` });
    });
  }

  gridKontakteLoadData(event: any) {
    this.dbHopeKurseTextbausteine.getBases(`${event.filter}`, event.top, event.skip, `${event.orderby}`, event.top != null && event.skip != null, null, null, null)
    .subscribe((result: any) => {
      this.getBasesResult = result.value;

      this.getBasesCount = event.top != null && event.skip != null ? result['@odata.count'] : result.value.length;
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: `Error`, detail: `Unable to load Bases` });
    });
  }

  gridKontakteRowSelect(event: any) {
    this.isEdit = true;

    this.base = event;
  }

  templateForm0Submit(event: any) {
    if (this.isEdit) {
          this.dbHopeKurseTextbausteine.updateBase(null, this.base.BaseID, event)
      .subscribe((result: any) => {
          this.notificationService.notify({ severity: "success", summary: `Success`, detail: `Base updated!` });

      this.gridKontakte.load()
      }, (result: any) => {
          this.notificationService.notify({ severity: "error", summary: `Error`, detail: `Unable to update Base` });
      });
    }

    if (!this.isEdit) {
          this.dbHopeKurseTextbausteine.createBase(null, event)
      .subscribe((result: any) => {
          this.base = {};

      this.notificationService.notify({ severity: "success", summary: `Success`, detail: `Base created!` });
      }, (result: any) => {
          this.notificationService.notify({ severity: "error", summary: `Error`, detail: `Unable to create new Base!` });
      });
    }
  }

  listboxKontakteChange(event: any) {
    this.datBaseAlles = event;
  }

  form0Submit(event: any) {
    if (this.isEdit) {
          this.dbHopeKurseTextbausteine.updateBase(null, this.base.BaseID, event)
      .subscribe((result: any) => {
          this.notificationService.notify({ severity: "success", summary: `Success`, detail: `Base updated!` });

      this.gridKontakte.load()
      }, (result: any) => {
          this.notificationService.notify({ severity: "error", summary: `Error`, detail: `Unable to update Base` });
      });
    }

    if (!this.isEdit) {
          this.dbHopeKurseTextbausteine.createBase(null, event)
      .subscribe((result: any) => {
          this.base = {};

      this.notificationService.notify({ severity: "success", summary: `Success`, detail: `Base created!` });
      }, (result: any) => {
          this.notificationService.notify({ severity: "error", summary: `Error`, detail: `Unable to create new Base!` });
      });
    }
  }
}
