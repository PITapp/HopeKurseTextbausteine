/*
  This file is automatically generated. Any changes will be overwritten.
  Modify kurse.component.ts instead.
*/
import { LOCALE_ID, ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';
import { Subscription } from 'rxjs';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { HeadingComponent } from '@radzen/angular/dist/heading';
import { TabsComponent } from '@radzen/angular/dist/tabs';
import { PanelComponent } from '@radzen/angular/dist/panel';
import { GridComponent } from '@radzen/angular/dist/grid';
import { ButtonComponent } from '@radzen/angular/dist/button';

import { ConfigService } from '../config.service';
import { KurseThemenBearbeitenComponent } from '../kurse-themen-bearbeiten/kurse-themen-bearbeiten.component';
import { KurseThemenNeuComponent } from '../kurse-themen-neu/kurse-themen-neu.component';
import { KurseBearbeitenComponent } from '../kurse-bearbeiten/kurse-bearbeiten.component';
import { KurseNeuComponent } from '../kurse-neu/kurse-neu.component';

import { DbHopeKurseTextbausteineService } from '../db-hope-kurse-textbausteine.service';
import { SecurityService } from '../security.service';

export class KurseGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('heading8') heading8: HeadingComponent;
  @ViewChild('heading9') heading9: HeadingComponent;
  @ViewChild('heading2') heading2: HeadingComponent;
  @ViewChild('tabs0') tabs0: TabsComponent;
  @ViewChild('panel0') panel0: PanelComponent;
  @ViewChild('gridKurse') gridKurse: GridComponent;
  @ViewChild('button0') button0: ButtonComponent;
  @ViewChild('panel1') panel1: PanelComponent;
  @ViewChild('gridKurseThemen') gridKurseThemen: GridComponent;
  @ViewChild('panel2') panel2: PanelComponent;
  @ViewChild('gridKurseThemen2') gridKurseThemen2: GridComponent;
  @ViewChild('button1') button1: ButtonComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  configService: ConfigService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  httpClient: HttpClient;

  locale: string;

  _location: Location;

  _subscription: Subscription;

  dbHopeKurseTextbausteine: DbHopeKurseTextbausteineService;

  security: SecurityService;
  parameters: any;
  rstKurse: any;
  rstKurseCount: any;
  dsoKurse: any;
  rstKurseThemen: any;
  rstKurseThemenCount: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.configService = this.injector.get(ConfigService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.locale = this.injector.get(LOCALE_ID);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.httpClient = this.injector.get(HttpClient);

    this.dbHopeKurseTextbausteine = this.injector.get(DbHopeKurseTextbausteineService);
    this.security = this.injector.get(SecurityService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    if (this._subscription) {
      this._subscription.unsubscribe();
    }
  }


  load() {
    this.gridKurse.load();
  }

  gridKurseDelete(event: any) {
    this.dbHopeKurseTextbausteine.deleteIbsiKurse(event.KursNr)
    .subscribe((result: any) => {
      this.notificationService.notify({ severity: "success", summary: `Kurs erfolgreich gelöscht`, detail: `` });
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: `Kurs konnte nicht gelöscht werden!`, detail: `` });
    });
  }

  gridKurseLoadData(event: any) {
    this.dbHopeKurseTextbausteine.getIbsiKurses(`${event.filter}`, event.top, event.skip, `${event.orderby || 'Titel'}`, event.top != null && event.skip != null, `IbsiKurseArten`, null, null)
    .subscribe((result: any) => {
      this.rstKurse = result.value;

      this.rstKurseCount = event.top != null && event.skip != null ? result['@odata.count'] : result.value.length;

      if (result.value.length && !this.gridKurse.value) {
        this.gridKurse.onSelect(result.value[0])
      }
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: `Kurse konnten nicht geladen werden!`, detail: `` });
    });
  }

  gridKurseRowSelect(event: any) {
    this.dsoKurse = event;

    this.dbHopeKurseTextbausteine.getIbsiKurseThemens(`KursNr eq ${event.KursNr}`, event.top, event.skip, `${event.orderby || 'Nummer'}`, event.top != null && event.skip != null, null, null, null)
    .subscribe((result: any) => {
      this.rstKurseThemen = result.value;

      this.rstKurseThemenCount = event.top != null && event.skip != null ? result['@odata.count'] : result.value.length;
    }, (result: any) => {

    });
  }

  editButtonKurseClick(event: any, data: any) {
    this.gridKurse.onSelect(data)

    this.dialogService.open(KurseBearbeitenComponent, { parameters: {KursNr: data.KursNr}, title: `Bearbeiten Kurs` })
        .afterClosed().subscribe(result => {
              if (result != null) {
        this.gridKurse.onSelect(data)
      }
    });
  }

  button0Click(event: any) {
    this.dialogService.open(KurseNeuComponent, { parameters: {}, title: `Neuer Kurs` })
        .afterClosed().subscribe(result => {
              if (result != null) {
        this.gridKurse.load();
      }
    });
  }

  gridKurseThemen2Delete(event: any) {
    this.dbHopeKurseTextbausteine.deleteIbsiKurseThemen(event.KursThemaNr)
    .subscribe((result: any) => {
      this.notificationService.notify({ severity: "success", summary: `Thema erfolgreich gelöscht`, detail: `` });
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: `Thema konnte nicht gelöscht werden!`, detail: `` });
    });
  }

  editButtonKurseThemenClick(event: any, data: any) {
    this.gridKurseThemen2.onSelect(data)

    this.dialogService.open(KurseThemenBearbeitenComponent, { parameters: {KursThemaNr: data.KursThemaNr}, title: `Bearbeiten Thema` });
  }

  button1Click(event: any) {
    this.dialogService.open(KurseThemenNeuComponent, { parameters: {KursNr: this.dsoKurse.KursNr}, title: `Neues Thema` })
        .afterClosed().subscribe(result => {
              if (result != null) {
        this.gridKurseThemen2.load();
      }
    });
  }
}
